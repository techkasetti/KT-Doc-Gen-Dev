/**
 * Test class for Document Export functionality
 */
@IsTest
public class DocumentExportControllerTest {
    
    @TestSetup
    static void makeData() {
        DocumentLifecycleConfiguration__c testDoc = new DocumentLifecycleConfiguration__c(
            DocumentTitle__c = 'Test Document',
            GeneratedClause__c = '<h1>Test Document</h1><p>This is a test document generated by AI.</p>',
            OutputFormat__c = 'HTML',
            ProcessingStatus__c = 'Completed',
            AI_Model_Used__c = 'einstein_gpt_latest'
        );
        insert testDoc;
    }
    
    @IsTest
    static void testExportDocument() {
        Test.startTest();
        DocumentLifecycleConfiguration__c testDoc = 
            [SELECT Id, GeneratedClause__c FROM DocumentLifecycleConfiguration__c LIMIT 1];
        
        DocumentExportController.ExportRequest request = new DocumentExportController.ExportRequest();
        request.documentContent = testDoc.GeneratedClause__c;
        request.format = 'pdf';
        request.title = 'Exported Test Document';
        request.metadata = new Map<String, Object>{
            'aiModel' => 'einstein_gpt_latest',
            'generatedDate' => DateTime.now()
        };
        
        DocumentExportController.ExportResult result = DocumentExportController.exportDocument(request);
        
        System.assertNotEquals(null, result, 'Export result should not be null');
        System.assertEquals('SUCCESS', result.status, 'Export should be successful');
        System.assert(result.downloadUrl.length() > 0, 'Should provide download URL');
        System.assert(result.filename.contains('.pdf'), 'Should have correct file extension');
        Test.stopTest();
    }
    
    @IsTest
    static void testSaveDocumentToLibrary() {
        Test.startTest();
        DocumentExportController.SaveRequest request = new DocumentExportController.SaveRequest();
        request.documentContent = '<h1>Saved Document</h1><p>Content to save.</p>';
        request.title = 'Saved Test Document';
        request.folderId = UserInfo.getUserId(); // Using user ID as folder for test
        request.metadata = new Map<String, Object>{
            'aiModel' => 'einstein_gpt_latest',
            'wordCount' => 4
        };
        
        DocumentExportController.SaveResult result = DocumentExportController.saveDocumentToLibrary(request);
        
        System.assertNotEquals(null, result, 'Save result should not be null');
        System.assertEquals('SUCCESS', result.status, 'Save should be successful');
        System.assertNotEquals(null, result.documentId, 'Should return document ID');
        Test.stopTest();
    }
    
    @IsTest
    static void testBulkExport() {
        Test.startTest();
        List<DocumentExportController.ExportRequest> requests = new List<DocumentExportController.ExportRequest>();
        
        for (Integer i = 0; i < 3; i++) {
            DocumentExportController.ExportRequest request = new DocumentExportController.ExportRequest();
            request.documentContent = '<h1>Document ' + i + '</h1><p>Test content.</p>';
            request.format = 'pdf';
            request.title = 'Bulk Document ' + i;
            requests.add(request);
        }
        
        List<DocumentExportController.ExportResult> results = DocumentExportController.bulkExportDocuments(requests);
        
        System.assertEquals(3, results.size(), 'Should export all documents');
        for (DocumentExportController.ExportResult result : results) {
            System.assertEquals('SUCCESS', result.status, 'Each export should be successful');
        }
        Test.stopTest();
    }
}